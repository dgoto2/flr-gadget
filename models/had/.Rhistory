rec = stk1_rec.flq[, 25:(proj.yr-first.yr)])) ## only data after 86 was used
plot(sr.modelfit)
sr_params <- as.data.frame(FLQuant((sr.modelfit@params@.Data[, 1]),
dim = c(stk1_params.n, last.yr-first.yr+1, nu, ns, na, ni),
quant = 'param',
dimnames = list(param = c("a", "b"),
year = first.yr:last.yr,
#area = 1:na,
season = 1:ns,
iter = it)))
stk1_params.array <- xtabs2(data ~ param + year + season + iter,
data = sr_params,
exclude = NULL,
na.action = na.pass)[, , , it, drop = F]
stk1_uncertainty.flq <- FLQuant(c(1.2),
dim = c(1.1, last.yr-first.yr+1, nu, ns, na, ni), ## uncertainty
dimnames = list(year = first.yr:last.yr, season=1:ns, iter=it))
stk1_proportion.flq <- FLQuant(0,
dim = c(1, last.yr-first.yr+1, nu, ns, na, ni), ## proportion
dimnames = list(year = first.yr:last.yr, season=1:ns, iter=it))
stk1_proportion.flq[,,,1][] <- 1 # all spawning occurs in season 1
stk1_prop.avg.yrs <- c((proj.yr-3):(proj.yr-1)) ## the last 3 years -1 in the obs data
stk1_timelag.matrix <- matrix(c(0, 1), nrow=2, ncol=1, dimnames=list(c('year', 'season'), 'all'))
## create SRs objects
stks.data <- list(stk1 = ls(pattern="^stk1"))
SRs <- create.SRs.data(yrs, ns, ni, stks.data)
## if season > 1
#SRs$stk1@rec[,,,2:4] <- 0 # recruitment occurs in season 1 only
#SRs$stk1@params[,1:(last.yr-proj.yr+2),,] <- NA
## fleets:
## Data per fleet
data_catch <- fit$stock.prey %>%
filter(year >= first.yr & year < proj.yr) %>% # catch/landings from the gadget model fit output
group_by(year, step, age, area) %>%
summarise(data = sum(biomass_consumed)) %>%
select(year, step, age, area, data) %>%
rename(season = step)#,
#data = biomass_consumed)
## landings.n, discards.n,landings.wt, discards.wt, landings, discards, landings.sel, discards.sel, price
fl1.met1.stk1_landings.n.flq <- iter(as.FLQuant(as.data.frame(data_catch)), it) # landings
fl1.met1.stk1_discards.n.flq <- fl1.met1.stk1_landings.n.flq # discards
fl1.met1.stk1_discards.n.flq[] <- 0 # no discards for this model
## economic parameter values are arbitararily set for this example
fl1_effort.flq <- FLQuant(76606433,
dim = c(1, proj.yr-first.yr, nu, ns, na, ni), ## effort
dimnames = list(year = first.yr:(proj.yr-1), season=1:ns, iter=it))
fl1_capacity.flq <- FLQuant(76606433,
dim = c(1, proj.yr-first.yr, nu, ns, na, ni), ## capacity
dimnames = list(year = first.yr:(proj.yr-1), season=1:ns, iter=it))
fl1_fcost.flq <- FLQuant(219.97,
dim = c(1, proj.yr-first.yr, nu, ns, na, ni), ## fcost
dimnames = list(year = first.yr:(proj.yr-1), season=1:ns, iter=it))
fl1_crewshare.flq <- FLQuant(3121.8,
dim = c(1, proj.yr-first.yr, nu, ns, na, ni), ## crewshare
dimnames = list(year = first.yr:(proj.yr-1), season=1:ns, iter=it))
fl1.met1_effshare.flq <- FLQuant(1,
dim = c(1, proj.yr-first.yr, nu, ns, na, ni), ##  effort share
dimnames = list(year = first.yr:(proj.yr-1), season=1:ns, iter=it))
## fleets: fl1
fl1_proj.avg.yrs <- c((proj.yr-3):(proj.yr-1))  # use the last 2 years in the obs data
fl1.met1_proj.avg.yrs <- c((proj.yr-3):(proj.yr-1))  # use the last 2 years in the obs data
fl1.met1.stk1_proj.avg.yrs  <- c((proj.yr-3):(proj.yr-1))  # use the last 3 years -1 in the obs data
## create fleets object
fls.data <- list(fl1=ls(pattern="^fl1"))
fleets <- create.fleets.data(yrs, ns, ni, fls.data, stks.data)
## fleets.ctrl:
n.fls.stks  <- 1
fls.stksnames <- 'stk1'
effort.models  <- 'fixedEffort'
effort.restr.fl1 <- 'stk1'
restriction.fl1 <- 'catch'
catch.models <- 'CobbDouglasAge' #'gadgetCatch'
capital.models <- 'fixedCapital'
flq.stk1 <- FLQuant(dimnames = list(age = 'all',
year = first.yr:last.yr,
unit = stk1.unit,
season = 1:ns,
iter = 1:ni))
fleets.ctrl <- create.fleets.ctrl(fls = fls,
n.fls.stks = n.fls.stks,
fls.stksnames = fls.stksnames,
effort.models = effort.models,
catch.models = catch.models,
capital.models = capital.models,
flq = flq.stk1,
effort.restr.fl1 = effort.restr.fl1,
restriction.fl1 = restriction.fl1)
fleets.ctrl$fl1$stk1$discard.TAC.OS  <- FALSE
fleets.ctrl$fl1$restriction <- "landings"
## testing the FLBEIA-Gadget MSE framework (IMR-REDUS project) - with the simple haddock Gadget example model (J. Begley)
## started: mar 11, 2019; updated jul 15, 2019
#### NO GADGET OPTION WITH THE ORIGINAL FLBIEA ######################
## a bug in age2ageData()???? season in stck should 'all'
## conditioning the operating model
## install packages
#install.packages(c("ggplot2", "Matrix", "nloptr", "mvtnorm", "triangle", "XLConnect"))
#install.packages("FLBEIA", repos="http://flr-project.org/R") # the original FLBEIA
#devtools::install_github("hafro/rgadget")
#install.packages("/home/a5614/git/FLBEIA", repos = NULL, type="source") # from the local source
## load requied packages
library(dplyr)
library(FLCore)
library(FLAssess)
library(FLash)
library(FLFleet)
library(FLa4a)
library(FLBEIA)
library(ggplot2)
#library(FLSAM)
library(gtools)
library(Rgadget)
library(FLXSA)
# a simple example with single stock and single fleet.
## Conditioning
## biols:
## An FLBiols object that contains biological information of stk1 relative to 'real' biological population within the OM.
first.yr <- 1978
proj.yr <- 2000
last.yr <- 2020
yrs <- c(first.yr=first.yr,
proj.yr=proj.yr,
last.yr=last.yr)
##  Set names, age, dimensions
fls <- c('fl1')
stks <- c('stk1')
fl1.mets <- c('met1')
fl1.met1.stks <- c('stk1')
## all stocks the same
ni <- 10 # the number of iterations
it <- 1:ni # interation id
ns <- 4 # the number of seasons
na <- 1 # the number of areas
nu <- 1 # the number of units
## stock stk1 - (for haddock, age 1-10+)
stk1.age.min <- 1
stk1.age.max  <- 10
stk1.unit  <- 1
## Data: stk1_n.flq, m, spwn, fec, wt - use FLQuant
## stock stk1
## change the working directory to the location of the gadget model
setwd("/home/a5614/git/flbeia-gadget/hadmodel")
mypath <- getwd()
## To estimate the model parameters the suggested procedure is to use the iterative reweighting approach
## with is implemented in the gadget.iterative function (see ?gadget.iterative for further details).
# gadget.iterative(main='main',
#                  params.file = 'refinputfile',
#                  wgts='WGTS')
## If you ran the gadget.iterative you simply type:
## fit <- gadget.fit() ## but otherwise do:
#if(ns == 1) {steps = 1} else {steps = "all"}
paramsfile <- 'refinputfile'
fit <- gadget.fit(wgts = NULL,
params.file = 'refinputfile',
steps = "all")
## reset the directory
setwd("..")
dir <- getwd()
## OM:
## main.ctrl: Controls the settings with the initial and final year of the projected period.
main.ctrl <- list()
main.ctrl$sim.years <- c(initial = proj.yr,
final = last.yr)
## get the stock input data (derived from the Gadget model fitting output or assessments)
## read in gadget output
## stock number by age
data_n <- fit$stock.std %>% # stock size only for 'hindcasts'
filter(year < proj.yr) %>%
select(year, step, age, area, number) %>%
rename(season = step,
data = number)
## stock weight by age
data_wt <- fit$stock.std %>% #
filter(year < proj.yr) %>%
select(year, step, age, area, mean_weight) %>%
rename(season = step,
data = mean_weight)
## recruit number
data_rec <- fit$stock.recruitment %>%
filter(year < proj.yr) #%>%
#group_by(year, area) %>%
#summarise(data = recruitment)
# create FLQuant objects
stk1_n.flq <- iter(as.FLQuant(as.data.frame(data_n)), it)
stk1_n.flq[1, ] <- data_rec$recruitment  # replace by recruit number if not in the Gadget 'immature' stock
stk1_wt.flq <- iter(as.FLQuant(as.data.frame(data_wt)), it)
stk1_m.flq <- FLQuant(c(0.5, 0.35, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2), # natural mortality
dim=c(stk1.age.max, proj.yr-first.yr, na, ns),
quant='age',
dimnames=list(age = stk1.age.min:stk1.age.max,
year = first.yr:(proj.yr-1),
season = 1:ns)) # m derived from the gadget input file
stk1_spwn.flq <- FLQuant(c(1),
dim=c(stk1.age.max, proj.yr-first.yr, na, ns),
quant='age',
dimnames=list(age = stk1.age.min:stk1.age.max,
year = first.yr:(proj.yr-1),
season = 1:ns))
stk1_fec.flq <- FLQuant(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
dim=c(stk1.age.max, proj.yr-first.yr, na, ns),
quant='age',
dimnames=list(age = stk1.age.min:stk1.age.max,
year = first.yr:(proj.yr-1),
season = 1:ns))
stk1_mat.flq <- stk1_fec.flq # maturity parameter
stk1_mat.flq[2:stk1.age.max] <- c(0.5, 1, 1, 1, 1, 1, 1, 1, 1)  # maturation starts at age 2
stk1_range.min <- 1
stk1_range.max <- 10
stk1_range.plusgroup <- 10
stk1_range.minyear <- 1978
stk1_range.minfbar <- 2 # Min age for calculating average fishing mortality
stk1_range.maxfbar <- 6 # max age for calculating average fishing mortality
## Projection biols: weight, fecundity, mortality and spawning
stk1_biol.proj.avg.yrs  <- c((proj.yr-3):(proj.yr-1)) # the last 3 years of the historical data
## Create the object
stks.data <- list(stk1=ls(pattern="^stk1"))
biols <- create.biols.data(yrs, ns, ni, stks.data)
## biols.ctrl:
#growth.model <- c('gadgetGrowth')
growth.model <- c('ASPG')
biols.ctrl <- create.biols.ctrl(stksnames=stks, growth.model=growth.model)
## SRs:
## stock-recruitment model
data_rec <- data_rec %>%
select(year, area, recruitment) %>%
rename(data = recruitment)
data_rec$data = data_rec$data#/10000 ## adjusted for gadget simulations
data_rec$age <- 1 # recruitment age
stk1_rec.flq = iter(as.FLQuant(as.data.frame(data_rec)), it) # recruitment
stk1_ssb.flq = ssb(biols[[1]][, 1:(proj.yr-first.yr),,]) # ssb
## fit the stock-recruit model
stk1_sr.model <- 'rickerAR1'
stk1_params.n <- 3
stk1_params.name <- c('a','b','c')
sr.modelfit <- fmle(FLSR(model = stk1_sr.model,
ssb = stk1_ssb.flq[, 1:(proj.yr-first.yr-1),, 1],
rec = stk1_rec.flq[, 2:(proj.yr-first.yr)]))
## testing the FLBEIA-Gadget MSE framework (IMR-REDUS project) - with the simple haddock Gadget example model (J. Begley)
## started: mar 11, 2019; updated jul 15, 2019
#### NO GADGET OPTION WITH THE ORIGINAL FLBIEA ######################
## a bug in age2ageData()???? season in stck should 'all'
## conditioning the operating model
## install packages
#install.packages(c("ggplot2", "Matrix", "nloptr", "mvtnorm", "triangle", "XLConnect"))
#install.packages("FLBEIA", repos="http://flr-project.org/R") # the original FLBEIA
#devtools::install_github("hafro/rgadget")
#install.packages("/home/a5614/git/FLBEIA", repos = NULL, type="source") # from the local source
## load requied packages
library(dplyr)
library(FLCore)
library(FLAssess)
library(FLash)
library(FLFleet)
library(FLa4a)
library(FLBEIA)
library(ggplot2)
#library(FLSAM)
library(gtools)
library(Rgadget)
library(FLXSA)
# a simple example with single stock and single fleet.
## Conditioning
## biols:
## An FLBiols object that contains biological information of stk1 relative to 'real' biological population within the OM.
first.yr <- 1978
proj.yr <- 2000
last.yr <- 2020
yrs <- c(first.yr=first.yr,
proj.yr=proj.yr,
last.yr=last.yr)
##  Set names, age, dimensions
fls <- c('fl1')
stks <- c('stk1')
fl1.mets <- c('met1')
fl1.met1.stks <- c('stk1')
## all stocks the same
ni <- 10 # the number of iterations
it <- 1:ni # interation id
ns <- 4 # the number of seasons
na <- 1 # the number of areas
nu <- 1 # the number of units
## stock stk1 - (for haddock, age 1-10+)
stk1.age.min <- 1
stk1.age.max  <- 10
stk1.unit  <- 1
## Data: stk1_n.flq, m, spwn, fec, wt - use FLQuant
## stock stk1
## change the working directory to the location of the gadget model
setwd("/home/a5614/git/flbeia-gadget/hadmodel")
mypath <- getwd()
## To estimate the model parameters the suggested procedure is to use the iterative reweighting approach
## with is implemented in the gadget.iterative function (see ?gadget.iterative for further details).
# gadget.iterative(main='main',
#                  params.file = 'refinputfile',
#                  wgts='WGTS')
## If you ran the gadget.iterative you simply type:
## fit <- gadget.fit() ## but otherwise do:
#if(ns == 1) {steps = 1} else {steps = "all"}
paramsfile <- 'refinputfile'
fit <- gadget.fit(wgts = NULL,
params.file = 'refinputfile',
steps = "all")
## reset the directory
#setwd("..")
#dir <- getwd()
## testing the FLBEIA-Gadget MSE framework (IMR-REDUS project) - with the simple haddock Gadget example model (J. Begley)
## started: mar 11, 2019; updated jul 15, 2019
#### NO GADGET OPTION WITH THE ORIGINAL FLBIEA ######################
## a bug in age2ageData()???? season in stck should 'all'
## conditioning the operating model
## install packages
#install.packages(c("ggplot2", "Matrix", "nloptr", "mvtnorm", "triangle", "XLConnect"))
#install.packages("FLBEIA", repos="http://flr-project.org/R") # the original FLBEIA
#devtools::install_github("hafro/rgadget")
#install.packages("/home/a5614/git/FLBEIA", repos = NULL, type="source") # from the local source
## load requied packages
library(dplyr)
library(FLCore)
library(FLAssess)
library(FLash)
library(FLFleet)
library(FLa4a)
library(FLBEIA)
library(ggplot2)
#library(FLSAM)
library(gtools)
library(Rgadget)
library(FLXSA)
# a simple example with single stock and single fleet.
## Conditioning
## biols:
## An FLBiols object that contains biological information of stk1 relative to 'real' biological population within the OM.
first.yr <- 1978
proj.yr <- 2000
last.yr <- 2020
yrs <- c(first.yr=first.yr,
proj.yr=proj.yr,
last.yr=last.yr)
##  Set names, age, dimensions
fls <- c('fl1')
stks <- c('stk1')
fl1.mets <- c('met1')
fl1.met1.stks <- c('stk1')
## all stocks the same
ni <- 10 # the number of iterations
it <- 1:ni # interation id
ns <- 4 # the number of seasons
na <- 1 # the number of areas
nu <- 1 # the number of units
## stock stk1 - (for haddock, age 1-10+)
stk1.age.min <- 1
stk1.age.max  <- 10
stk1.unit  <- 1
## Data: stk1_n.flq, m, spwn, fec, wt - use FLQuant
## stock stk1
## change the working directory to the location of the gadget model
setwd("/home/a5614/git/flbeia-gadget/hadmodel")
mypath <- getwd()
## To estimate the model parameters the suggested procedure is to use the iterative reweighting approach
## with is implemented in the gadget.iterative function (see ?gadget.iterative for further details).
# gadget.iterative(main='main',
#                  params.file = 'refinputfile',
#                  wgts='WGTS')
## If you ran the gadget.iterative you simply type:
## fit <- gadget.fit() ## but otherwise do:
#if(ns == 1) {steps = 1} else {steps = "all"}
paramsfile <- 'refinputfile'
fit <- gadget.fit(wgts = NULL,
params.file = 'refinputfile',
steps = "all")
## reset the directory
## OM:
## main.ctrl: Controls the settings with the initial and final year of the projected period.
main.ctrl <- list()
main.ctrl$sim.years <- c(initial = proj.yr,
final = last.yr)
## get the stock input data (derived from the Gadget model fitting output or assessments)
## read in gadget output
## stock number by age
data_n <- fit$stock.std %>% # stock size only for 'hindcasts'
filter(year < proj.yr) %>%
select(year, step, age, area, number) %>%
rename(season = step,
data = number)
## stock weight by age
data_wt <- fit$stock.std %>% #
filter(year < proj.yr) %>%
select(year, step, age, area, mean_weight) %>%
rename(season = step,
data = mean_weight)
## recruit number
data_rec <- fit$stock.recruitment %>%
filter(year < proj.yr) #%>%
#group_by(year, area) %>%
#summarise(data = recruitment)
# create FLQuant objects
stk1_n.flq <- iter(as.FLQuant(as.data.frame(data_n)), it)
stk1_n.flq[1, ] <- data_rec$recruitment  # replace by recruit number if not in the Gadget 'immature' stock
stk1_wt.flq <- iter(as.FLQuant(as.data.frame(data_wt)), it)
stk1_m.flq <- FLQuant(c(0.5, 0.35, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2), # natural mortality
dim=c(stk1.age.max, proj.yr-first.yr, na, ns),
quant='age',
dimnames=list(age = stk1.age.min:stk1.age.max,
year = first.yr:(proj.yr-1),
season = 1:ns)) # m derived from the gadget input file
stk1_spwn.flq <- FLQuant(c(1),
dim=c(stk1.age.max, proj.yr-first.yr, na, ns),
quant='age',
dimnames=list(age = stk1.age.min:stk1.age.max,
year = first.yr:(proj.yr-1),
season = 1:ns))
stk1_fec.flq <- FLQuant(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
dim=c(stk1.age.max, proj.yr-first.yr, na, ns),
quant='age',
dimnames=list(age = stk1.age.min:stk1.age.max,
year = first.yr:(proj.yr-1),
season = 1:ns))
stk1_mat.flq <- stk1_fec.flq # maturity parameter
stk1_mat.flq[2:stk1.age.max] <- c(0.5, 1, 1, 1, 1, 1, 1, 1, 1)  # maturation starts at age 2
stk1_range.min <- 1
stk1_range.max <- 10
stk1_range.plusgroup <- 10
stk1_range.minyear <- 1978
stk1_range.minfbar <- 2 # Min age for calculating average fishing mortality
stk1_range.maxfbar <- 6 # max age for calculating average fishing mortality
## Projection biols: weight, fecundity, mortality and spawning
stk1_biol.proj.avg.yrs  <- c((proj.yr-3):(proj.yr-1)) # the last 3 years of the historical data
## Create the object
stks.data <- list(stk1=ls(pattern="^stk1"))
biols <- create.biols.data(yrs, ns, ni, stks.data)
## biols.ctrl:
#growth.model <- c('gadgetGrowth')
growth.model <- c('ASPG')
biols.ctrl <- create.biols.ctrl(stksnames=stks, growth.model=growth.model)
## SRs:
## stock-recruitment model
data_rec <- data_rec %>%
select(year, area, recruitment) %>%
rename(data = recruitment)
data_rec$data = data_rec$data#/10000 ## adjusted for gadget simulations
data_rec$age <- 1 # recruitment age
stk1_rec.flq = iter(as.FLQuant(as.data.frame(data_rec)), it) # recruitment
stk1_ssb.flq = ssb(biols[[1]][, 1:(proj.yr-first.yr),,]) # ssb
## fit the stock-recruit model
stk1_sr.model <- 'rickerAR1'
stk1_params.n <- 3
stk1_params.name <- c('a','b','c')
sr.modelfit <- fmle(FLSR(model = stk1_sr.model,
ssb = stk1_ssb.flq[, 1:(proj.yr-first.yr-1),, 1],
rec = stk1_rec.flq[, 2:(proj.yr-first.yr)]))
sr_params <- as.data.frame(FLQuant((sr.modelfit@params@.Data[, 1]),
dim = c(stk1_params.n, last.yr-first.yr+1, nu, ns, na, ni),
quant = 'param',
dimnames = list(param = c("a", "b", "c"),
year = first.yr:last.yr,
#area = 1:na,
season = 1:ns,
iter = it)))
stk1_params.array <- xtabs2(data ~ param + year + season + iter,
data = sr_params,
exclude = NULL,
na.action = na.pass)[, , , it, drop = F]
stk1_uncertainty.flq <- FLQuant(c(1.2),
dim = c(1.1, last.yr-first.yr+1, nu, ns, na, ni), ## uncertainty
dimnames = list(year = first.yr:last.yr, season=1:ns, iter=it))
stk1_proportion.flq <- FLQuant(0,
dim = c(1, last.yr-first.yr+1, nu, ns, na, ni), ## proportion
dimnames = list(year = first.yr:last.yr, season=1:ns, iter=it))
stk1_proportion.flq[,,,1][] <- 1 # all spawning occurs in season 1
stk1_prop.avg.yrs <- c((proj.yr-3):(proj.yr-1)) ## the last 3 years -1 in the obs data
stk1_timelag.matrix <- matrix(c(0, 1), nrow=2, ncol=1, dimnames=list(c('year', 'season'), 'all'))
## create SRs objects
stks.data <- list(stk1 = ls(pattern="^stk1"))
SRs <- create.SRs.data(yrs, ns, ni, stks.data)
## if season > 1
#SRs$stk1@rec[,,,2:4] <- 0 # recruitment occurs in season 1 only
SRs$stk1@params[,1:(last.yr-proj.yr+2),,] <- NA
## fleets:
## Data per fleet
data_catch <- fit$stock.prey %>%
filter(year < proj.yr) %>% # catch/landings from the gadget model fit output
select(year, step, age, area, biomass_consumed) %>%
#group_by(year, age, area) %>%
#summarise(data = sum(biomass_consumed))
rename(season = step,
data = biomass_consumed)
## landings.n, discards.n,landings.wt, discards.wt, landings, discards, landings.sel, discards.sel, price
fl1.met1.stk1_landings.n.flq <- iter(as.FLQuant(as.data.frame(data_catch)), it) # landings
fl1.met1.stk1_discards.n.flq <- fl1.met1.stk1_landings.n.flq # discards
fl1.met1.stk1_discards.n.flq[] <- 0 # no discards for this model
## economic parameter values are arbitararily set for this example
fl1_effort.flq <- FLQuant(76606433,
dim = c(1, proj.yr-first.yr, nu, ns, na, ni), ## effort
dimnames = list(year = first.yr:(proj.yr-1), season=1:ns, iter=it))
fl1_capacity.flq <- FLQuant(76606433,
dim = c(1, proj.yr-first.yr, nu, ns, na, ni), ## capacity
dimnames = list(year = first.yr:(proj.yr-1), season=1:ns, iter=it))
fl1_fcost.flq <- FLQuant(219.97,
dim = c(1, proj.yr-first.yr, nu, ns, na, ni), ## fcost
dimnames = list(year = first.yr:(proj.yr-1), season=1:ns, iter=it))
fl1_crewshare.flq <- FLQuant(3121.8,
dim = c(1, proj.yr-first.yr, nu, ns, na, ni), ## crewshare
dimnames = list(year = first.yr:(proj.yr-1), season=1:ns, iter=it))
fl1.met1_effshare.flq <- FLQuant(1,
dim = c(1, proj.yr-first.yr, nu, ns, na, ni), ##  effort share
dimnames = list(year = first.yr:(proj.yr-1), season=1:ns, iter=it))
## fleets: fl1
fl1_proj.avg.yrs <- c((proj.yr-3):(proj.yr-1))  # use the last 2 years in the obs data
fl1.met1_proj.avg.yrs <- c((proj.yr-3):(proj.yr-1))  # use the last 2 years in the obs data
fl1.met1.stk1_proj.avg.yrs  <- c((proj.yr-3):(proj.yr-1))  # use the last 3 years -1 in the obs data
## create fleets object
fls.data <- list(fl1=ls(pattern="^fl1"))
fleets <- create.fleets.data(yrs, ns, ni, fls.data, stks.data)
